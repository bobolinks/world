/* eslint-disable @typescript-eslint/no-unused-vars */
import * as THREE from 'three';
import * as Nodes from 'three/examples/jsm/nodes/Nodes';
const NodesHacked: any = Nodes;

type FactorItem = {
  clsName: string;
  cls?: typeof Object.constructor;
  func: (...args: any[]) => any;
  group: string;
  icon: string;
};

const factor: Record<string, FactorItem> = {
  EPSILON: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: () => Nodes.EPSILON, group: 'Math.Constants.Epsilon', icon: 'letter-e' },
  INFINITY: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: () => Nodes.INFINITY, group: 'Math.Constants.Infinity', icon: 'infinity' },
  ShaderNode: { clsName: 'undefined', cls: undefined, func: () => Nodes.ShaderNode, group: '', icon: '' },
  TBNViewMatrix: { clsName: 'undefined', cls: undefined, func: () => Nodes.TBNViewMatrix, group: '', icon: '' },
  abs: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.abs, group: 'Math.Functions.Abs', icon: 'math-function' },
  acos: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.acos, group: 'Math.Functions.Acos', icon: 'math-function' },
  add: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.add, group: 'Math.Arithmetic Operators.Addition', icon: 'plus' },
  and: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.and, group: 'Math.Logic Operators.And', icon: 'ampersand' },
  arrayBuffer: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: NodesHacked.arrayBuffer, group: '', icon: '' },
  asin: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.asin, group: 'Math.Functions.Asin', icon: 'math-function' },
  assign: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.assign, group: '', icon: '' },
  atan: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.atan, group: 'Math.Functions.Atan', icon: 'math-function' },
  atan2: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.atan2, group: 'Math.Functions.Atan2', icon: 'math-function' },
  attribute: { clsName: 'AttributeNode', cls: Nodes.AttributeNode, func: Nodes.attribute, group: 'Inputs.Geometry.Attribute', icon: 'book-upload' },
  backgroundBlurriness: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.backgroundBlurriness, group: '', icon: '' },
  backgroundIntensity: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.backgroundIntensity, group: '', icon: '' },
  bitAnd: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.bitAnd, group: 'Math.Bitwise Operators.Bitwise AND', icon: 'binary' },
  bitOr: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.bitOr, group: 'Math.Bitwise Operators.Bitwise OR', icon: 'binary' },
  bitXor: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.bitXor, group: 'Math.Bitwise Operators.Bitwise XOR', icon: 'binary' },
  bitangentGeometry: { clsName: 'BitangentNode', cls: Nodes.BitangentNode, func: () => Nodes.bitangentGeometry, group: 'Inputs.Bitangent.Bitangent Geometry', icon: 'arrows-up-left' },
  bitangentLocal: { clsName: 'BitangentNode', cls: Nodes.BitangentNode, func: () => Nodes.bitangentLocal, group: 'Inputs.Bitangent.Bitangent Local', icon: 'arrows-up-left' },
  bitangentView: { clsName: 'BitangentNode', cls: Nodes.BitangentNode, func: () => Nodes.bitangentView, group: 'Inputs.Bitangent.Bitangent View', icon: 'arrow-up-left' },
  bitangentWorld: { clsName: 'BitangentNode', cls: Nodes.BitangentNode, func: () => Nodes.bitangentWorld, group: 'Inputs.Bitangent.Bitangent World', icon: 'arrows-up-left' },
  bmat3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bmat3, group: '', icon: '' },
  bmat4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bmat4, group: '', icon: '' },
  bool: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bool, group: '', icon: '' },
  buffer: { clsName: 'BufferNode', cls: Nodes.BufferNode, func: Nodes.buffer, group: '', icon: '' },
  bufferAttribute: { clsName: 'undefined', cls: undefined, func: NodesHacked.bufferAttribute, group: '', icon: '' },
  burn: { clsName: 'BlendModeNode', cls: Nodes.BlendModeNode, func: Nodes.burn, group: 'Filters.Burn', icon: 'color-filter' },
  bvec2: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bvec2, group: 'Inputs.Primitives.ivec2', icon: 'box-multiple-2' },
  bvec3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bvec3, group: 'Inputs.Primitives.ivec3', icon: 'box-multiple-3' },
  bvec4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.bvec4, group: 'Inputs.Primitives.ivec4', icon: 'box-multiple-4' },
  bypass: { clsName: 'BypassNode', cls: Nodes.BypassNode, func: Nodes.bypass, group: '', icon: '' },
  cache: { clsName: 'CacheNode', cls: Nodes.CacheNode, func: Nodes.cache, group: '', icon: '' },
  call: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.call, group: '', icon: '' },
  cameraFar: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => NodesHacked.cameraFar, group: '', icon: '' },
  cameraNear: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => NodesHacked.cameraNear, group: '', icon: '' },
  cameraNormalMatrix: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => Nodes.cameraNormalMatrix, group: 'Inputs.Camera.Camera Normal Matrix', icon: 'video' },
  cameraPosition: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => Nodes.cameraPosition, group: 'Inputs.Camera.Camera Position', icon: 'video' },
  cameraProjectionMatrix: { clsName: 'ContextNode', cls: Nodes.ContextNode, func: () => Nodes.cameraProjectionMatrix, group: 'Inputs.Camera.Camera Projection Matrix', icon: 'video' },
  cameraViewMatrix: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => Nodes.cameraViewMatrix, group: 'Inputs.Camera.Camera View Matrix', icon: 'video' },
  cameraWorldMatrix: { clsName: 'CameraNode', cls: Nodes.CameraNode, func: () => Nodes.cameraWorldMatrix, group: 'Inputs.Camera.Camera World Matrix', icon: 'video' },
  ceil: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.ceil, group: 'Math.Functions.Ceil', icon: 'math-function' },
  checker: { clsName: 'CheckerNode', cls: Nodes.CheckerNode, func: Nodes.checker, group: 'Procedural.Checker', icon: 'border-all' },
  clamp: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.clamp, group: 'Math.Functions.Clamp', icon: 'math-function' },
  code: { clsName: 'CodeNode', cls: Nodes.CodeNode, func: Nodes.code, group: '', icon: '' },
  color: { clsName: 'UniformNode', cls: Nodes.UniformNode, func: () => new Nodes.UniformNode(new THREE.Color()), group: 'Inputs.Primitives.Color', icon: 'palette' },
  colorSpaceToLinear: { clsName: 'ColorSpaceNode', cls: Nodes.ColorSpaceNode, func: NodesHacked.colorSpaceToLinear, group: '', icon: '' },
  colorToDirection: { clsName: 'undefined', cls: undefined, func: NodesHacked.colorToDirection, group: 'Conversions.Color To Direction', icon: 'arrows-exchange' },
  compute: { clsName: 'ComputeNode', cls: Nodes.ComputeNode, func: Nodes.compute, group: '', icon: '' },
  cond: { clsName: 'CondNode', cls: Nodes.CondNode, func: Nodes.cond, group: '', icon: '' },
  context: { clsName: 'ContextNode', cls: Nodes.ContextNode, func: Nodes.context, group: '', icon: '' },
  convert: { clsName: 'ConvertNode', cls: Nodes.ConvertNode, func: Nodes.convert, group: '', icon: '' },
  cos: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.cos, group: 'Math.Functions.Cosine', icon: 'math-function' },
  createNodeFromType: { clsName: 'undefined', cls: undefined, func: NodesHacked.createNodeFromType, group: '', icon: '' },
  createNodeMaterialFromType: { clsName: 'undefined', cls: undefined, func: NodesHacked.createNodeMaterialFromType, group: '', icon: '' },
  cross: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.cross, group: 'Math.Functions.Cross', icon: 'math-function' },
  cubeTextureNode: { clsName: 'CubeTextureNode', cls: Nodes.CubeTextureNode, func: Nodes.cubeTexture, group: 'Inputs.Primitives.Cube Texture Node', icon: 'photo' },
  dFdx: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.dFdx, group: 'Math.Functions.dFdx', icon: 'math-function' },
  dFdy: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.dFdy, group: 'Math.Functions.dFdy', icon: 'math-function' },
  degrees: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.degrees, group: 'Math.Functions.Degrees', icon: 'math-function' },
  densityFog: { clsName: 'FogExp2Node', cls: Nodes.FogExp2Node, func: NodesHacked.densityFog, group: '', icon: '' },
  depth: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.depth, group: '', icon: '' },
  depthTexture: { clsName: 'undefined', cls: undefined, func: NodesHacked.depthTexture, group: '', icon: '' },
  difference: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.difference, group: 'Filters.Difference', icon: 'color-filter' },
  diffuseColor: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => Nodes.diffuseColor, group: '', icon: '' },
  directionToColor: { clsName: 'undefined', cls: undefined, func: NodesHacked.directionToColor, group: 'Conversions.Direction To Color', icon: 'arrows-exchange' },
  discard: { clsName: 'undefined', cls: undefined, func: NodesHacked.discard, group: '', icon: '' },
  distance: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.distance, group: 'Math.Functions.Distance', icon: 'math-function' },
  div: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.div, group: 'Math.Arithmetic Operators.Division', icon: 'divide' },
  dodge: { clsName: 'BlendModeNode', cls: Nodes.BlendModeNode, func: Nodes.dodge, group: 'Filters.Dodge', icon: 'color-filter' },
  dot: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.dot, group: 'Math.Functions.Dot', icon: 'math-function' },
  dynamicBufferAttribute: { clsName: 'undefined', cls: undefined, func: NodesHacked.dynamicBufferAttribute, group: '', icon: '' },
  element: { clsName: 'ArrayElementNode', cls: Nodes.ArrayElementNode, func: Nodes.element, group: '', icon: '' },
  equal: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.equal, group: 'Math.Logic Operators.Equality', icon: 'equal-double' },
  equirectUV: { clsName: 'EquirectUVNode', cls: Nodes.EquirectUVNode, func: () => Nodes.equirectUV, group: '', icon: '' },
  exp: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.exp, group: 'Math.Functions.Exp', icon: 'math-function' },
  exp2: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.exp2, group: '', icon: '' },
  expression: { clsName: 'ExpressionNode', cls: Nodes.ExpressionNode, func: Nodes.expression, group: '', icon: '' },
  faceDirection: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: () => Nodes.faceDirection, group: 'Inputs.Geometry.Face Direction', icon: 'brightness' },
  faceForward: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.faceForward, group: 'Math.Functions.Face Forward', icon: 'math-function' },
  float: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.float, group: 'Inputs.Primitives.float', icon: 'box-multiple-1' },
  floor: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.floor, group: 'Math.Functions.Floor', icon: 'math-function' },
  fog: { clsName: 'FogNode', cls: Nodes.FogNode, func: Nodes.fog, group: '', icon: '' },
  fract: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.fract, group: 'Math.Functions.Fract', icon: 'math-function' },
  frameId: { clsName: 'TimerNode', cls: Nodes.TimerNode, func: () => Nodes.frameId, group: '', icon: '' },
  frontFacing: { clsName: 'FrontFacingNode', cls: Nodes.FrontFacingNode, func: () => Nodes.frontFacing, group: 'Inputs.Geometry.Front Facing', icon: 'brightness' },
  fwidth: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.fwidth, group: '', icon: '' },
  getConstNodeType: { clsName: 'undefined', cls: undefined, func: NodesHacked.getConstNodeType, group: '', icon: '' },
  getGeometryRoughness: { clsName: 'MathNode', cls: Nodes.MathNode, func: () => Nodes.getGeometryRoughness, group: '', icon: '' },
  glsl: { clsName: 'CodeNode', cls: Nodes.CodeNode, func: NodesHacked.glsl, group: '', icon: '' },
  glslFn: { clsName: 'undefined', cls: undefined, func: NodesHacked.glslFn, group: '', icon: '' },
  greaterThan: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.greaterThan, group: 'Math.Logic Operators.Greater Than', icon: 'math-greater' },
  greaterThanEqual: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.greaterThanEqual, group: 'Math.Logic Operators.Greater Than Or Equal', icon: 'math-equal-greater' },
  hash: { clsName: 'undefined', cls: undefined, func: NodesHacked.hash, group: '', icon: '' },
  hue: { clsName: 'ColorAdjustmentNode', cls: Nodes.ColorAdjustmentNode, func: Nodes.hue, group: 'Filters.Hue', icon: 'color-filter' },
  imat3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.imat3, group: 'Inputs.Primitives.imat3', icon: 'box-multiple-3' },
  imat4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.imat4, group: 'Inputs.Primitives.imat4', icon: 'box-multiple-4' },
  instance: { clsName: 'InstanceNode', cls: Nodes.InstanceNode, func: NodesHacked.instance, group: '', icon: '' },
  instanceIndex: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.instanceIndex, group: '', icon: '' },
  instancedBufferAttribute: { clsName: 'undefined', cls: undefined, func: NodesHacked.instancedBufferAttribute, group: '', icon: '' },
  instancedDynamicBufferAttribute: { clsName: 'undefined', cls: undefined, func: NodesHacked.instancedDynamicBufferAttribute, group: '', icon: '' },
  int: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.int, group: '', icon: '' },
  inverseSqrt: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.inverseSqrt, group: '', icon: '' },
  ivec2: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.ivec2, group: 'Inputs.Primitives.ivec2', icon: 'box-multiple-2' },
  ivec3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.ivec3, group: 'Inputs.Primitives.ivec3', icon: 'box-multiple-3' },
  ivec4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.ivec4, group: 'Inputs.Primitives.ivec4', icon: 'box-multiple-4' },
  js: { clsName: 'CodeNode', cls: Nodes.CodeNode, func: NodesHacked.js, group: '', icon: '' },
  label: { clsName: 'ContextNode', cls: Nodes.ContextNode, func: Nodes.label, group: '', icon: '' },
  length: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.length, group: 'Math.Functions.Length', icon: 'math-function' },
  lessThan: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.lessThan, group: 'Math.Logic Operators.Less Than', icon: 'math-lower' },
  lessThanEqual: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.lessThanEqual, group: 'Math.Logic Operators.Less Than Or Equal', icon: 'math-equal-lower' },
  lightTargetDirection: { clsName: 'undefined', cls: undefined, func: NodesHacked.lightTargetDirection, group: '', icon: '' },
  lightingContext: { clsName: 'LightingContextNode', cls: Nodes.LightingContextNode, func: Nodes.lightingContext, group: '', icon: '' },
  lights: { clsName: 'LightsNode', cls: Nodes.LightsNode, func: Nodes.lights, group: '', icon: '' },
  lightsWithoutWrap: { clsName: 'LightsNode', cls: Nodes.LightsNode, func: NodesHacked.lightsWithoutWrap, group: '', icon: '' },
  linearToColorSpace: { clsName: 'ColorSpaceNode', cls: Nodes.ColorSpaceNode, func: NodesHacked.linearToColorSpace, group: '', icon: '' },
  linearTosRGB: { clsName: 'ColorSpaceNode', cls: Nodes.ColorSpaceNode, func: NodesHacked.linearTosRGB, group: '', icon: '' },
  log: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.log, group: 'Math.Functions.Log', icon: 'math-function' },
  log2: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.log2, group: 'Math.Functions.Log2', icon: 'math-function' },
  loop: { clsName: 'undefined', cls: undefined, func: NodesHacked.loop, group: '', icon: '' },
  lumaCoeffs: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: () => Nodes.lumaCoeffs, group: '', icon: '' },
  luminance: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.luminance, group: 'Filters.Luminance', icon: 'color-filter' },
  mat3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.mat3, group: 'Inputs.Primitives.mat3', icon: 'box-multiple-3' },
  mat4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.mat4, group: 'Inputs.Primitives.mat4', icon: 'box-multiple-4' },
  matcapUV: { clsName: 'MatcapUVNode', cls: Nodes.MatcapUVNode, func: () => Nodes.matcapUV, group: 'Inputs.UV.Matcap UV', icon: 'chart-treemap' },
  materialAlphaTest: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialAlphaTest, group: '', icon: '' },
  materialColor: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialColor, group: '', icon: '' },
  materialEmissive: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialEmissive, group: '', icon: '' },
  materialMetalness: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialMetalness, group: '', icon: '' },
  materialNormal: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.materialNormal, group: '', icon: '' },
  materialOpacity: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialOpacity, group: '', icon: '' },
  materialReference: { clsName: 'MaterialReferenceNode', cls: Nodes.MaterialReferenceNode, func: Nodes.materialReference, group: '', icon: '' },
  materialReflectivity: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => NodesHacked.materialReflectivity, group: '', icon: '' },
  materialRotation: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialRotation, group: '', icon: '' },
  materialRoughness: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => Nodes.materialRoughness, group: '', icon: '' },
  materialSheen: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => NodesHacked.materialSheen, group: '', icon: '' },
  materialSheenRoughness: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => NodesHacked.materialSheenRoughness, group: '', icon: '' },
  materialShininess: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => NodesHacked.materialShininess, group: '', icon: '' },
  materialSpecularColor: { clsName: 'MaterialNode', cls: Nodes.MaterialNode, func: () => NodesHacked.materialSpecularColor, group: '', icon: '' },
  max: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.max, group: 'Math.Functions.Max', icon: 'math-function' },
  maxMipLevel: { clsName: 'MaxMipLevelNode', cls: Nodes.MaxMipLevelNode, func: Nodes.maxMipLevel, group: '', icon: '' },
  metalness: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => Nodes.metalness, group: '', icon: '' },
  min: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.min, group: 'Math.Functions.Min', icon: 'math-function' },
  mix: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.mix, group: 'Math.Functions.Mix', icon: 'math-function' },
  mod: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.mod, group: 'Math.Functions.Modulo', icon: 'math-function' },
  modelDirection: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.modelDirection, group: 'Inputs.Model.Model Direction', icon: 'box' },
  modelNormalMatrix: { clsName: 'undefined', cls: undefined, func: () => Nodes.modelNormalMatrix, group: 'Inputs.Model.Model Normal Matrix', icon: 'box' },
  modelPosition: { clsName: 'undefined', cls: undefined, func: () => Nodes.modelPosition, group: 'Inputs.Model.Model Position', icon: 'box' },
  modelScale: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.modelScale, group: '', icon: '' },
  modelViewMatrix: { clsName: 'ContextNode', cls: Nodes.ContextNode, func: () => Nodes.modelViewMatrix, group: 'Inputs.Model.Model View Matrix', icon: 'box' },
  modelViewPosition: { clsName: 'undefined', cls: undefined, func: () => Nodes.modelViewPosition, group: 'Inputs.Model.Model View Position', icon: 'box' },
  modelViewProjection: { clsName: 'ModelViewProjectionNode', cls: Nodes.ModelViewProjectionNode, func: Nodes.modelViewProjection, group: '', icon: '' },
  modelWorldMatrix: { clsName: 'undefined', cls: undefined, func: () => Nodes.modelWorldMatrix, group: 'Inputs.Model.Model World Matrix', icon: 'box' },
  morph: { clsName: 'undefined', cls: undefined, func: NodesHacked.morph, group: '', icon: '' },
  mul: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mul, group: 'Math.Arithmetic Operators.Multiply', icon: 'x' },
  mx_cell_noise_float: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_cell_noise_float, group: '', icon: '' },
  mx_fractal_noise_float: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_fractal_noise_float, group: '', icon: '' },
  mx_fractal_noise_vec2: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_fractal_noise_vec2, group: '', icon: '' },
  mx_fractal_noise_vec3: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_fractal_noise_vec3, group: '', icon: '' },
  mx_fractal_noise_vec4: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_fractal_noise_vec4, group: '', icon: '' },
  mx_hsvtorgb: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_hsvtorgb, group: '', icon: '' },
  mx_noise_float: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_noise_float, group: '', icon: '' },
  mx_noise_vec2: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_noise_vec2, group: '', icon: '' },
  mx_noise_vec3: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_noise_vec3, group: '', icon: '' },
  mx_noise_vec4: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_noise_vec4, group: '', icon: '' },
  mx_ramplr: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.mx_ramplr, group: '', icon: '' },
  mx_ramptb: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.mx_ramptb, group: '', icon: '' },
  mx_rgbtohsv: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_rgbtohsv, group: '', icon: '' },
  mx_srgb_texture_to_lin_rec709: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: NodesHacked.mx_srgb_texture_to_lin_rec709, group: '', icon: '' },
  mx_transform_uv: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.mx_transform_uv, group: '', icon: '' },
  mx_worley_noise_float: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_worley_noise_float, group: '', icon: '' },
  mx_worley_noise_vec2: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_worley_noise_vec2, group: '', icon: '' },
  mx_worley_noise_vec3: { clsName: 'FunctionCallNode', cls: Nodes.FunctionCallNode, func: Nodes.mx_worley_noise_vec3, group: '', icon: '' },
  negate: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.negate, group: 'Math.Functions.Negate', icon: 'math-function' },
  nodeObject: { clsName: 'undefined', cls: undefined, func: Nodes.nodeObject, group: '', icon: '' },
  nodeObjects: { clsName: 'undefined', cls: undefined, func: Nodes.nodeObjects, group: '', icon: '' },
  nodeProxy: { clsName: 'undefined', cls: undefined, func: Nodes.nodeProxy, group: '', icon: '' },
  normalGeometry: { clsName: 'NormalNode', cls: Nodes.NormalNode, func: () => Nodes.normalGeometry, group: 'Inputs.Normal.Normal Geometry', icon: 'arrow-bar-up' },
  normalLocal: { clsName: 'NormalNode', cls: Nodes.NormalNode, func: () => Nodes.normalLocal, group: 'Inputs.Normal.Normal Local', icon: 'arrow-bar-up' },
  normalMap: { clsName: 'NormalMapNode', cls: Nodes.NormalMapNode, func: Nodes.normalMap, group: '', icon: '' },
  normalView: { clsName: 'NormalNode', cls: Nodes.NormalNode, func: () => Nodes.normalView, group: 'Inputs.Normal.Normal View', icon: 'arrow-bar-up' },
  normalWorld: { clsName: 'NormalNode', cls: Nodes.NormalNode, func: () => Nodes.normalWorld, group: 'Inputs.Normal.Normal World', icon: 'arrow-bar-up' },
  normalize: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.normalize, group: 'Math.Functions.Normalize', icon: 'math-function' },
  objectDirection: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectDirection, group: 'Inputs.Object.Object Direction', icon: '3d-cube-sphere' },
  objectNormalMatrix: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectNormalMatrix, group: 'Inputs.Object.Object Normal Matrix', icon: '3d-cube-sphere' },
  objectPosition: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectPosition, group: 'Inputs.Object.Object Position', icon: '3d-cube-sphere' },
  objectScale: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectScale, group: '', icon: '' },
  objectViewMatrix: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectViewMatrix, group: 'Inputs.Object.Object View Matrix', icon: '3d-cube-sphere' },
  objectViewPosition: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectViewPosition, group: 'Inputs.Object.Object View Position', icon: '3d-cube-sphere' },
  objectWorldMatrix: { clsName: 'Object3DNode', cls: Nodes.Object3DNode, func: NodesHacked.objectWorldMatrix, group: 'Inputs.Object.Object World Matrix', icon: '3d-cube-sphere' },
  oneMinus: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.oneMinus, group: 'Math.Functions.One Minus', icon: 'math-function' },
  or: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.or, group: 'Math.Logic Operators.Or', icon: 'switch-horizontal' },
  oscSawtooth: { clsName: 'OscNode', cls: Nodes.OscNode, func: Nodes.oscSawtooth, group: '', icon: '' },
  oscSine: { clsName: 'OscNode', cls: Nodes.OscNode, func: Nodes.oscSine, group: '', icon: '' },
  oscSquare: { clsName: 'OscNode', cls: Nodes.OscNode, func: Nodes.oscSquare, group: '', icon: '' },
  oscTriangle: { clsName: 'OscNode', cls: Nodes.OscNode, func: Nodes.oscTriangle, group: '', icon: '' },
  output: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => NodesHacked.output, group: '', icon: '' },
  outputStruct: { clsName: 'undefined', cls: undefined, func: NodesHacked.outputStruct, group: '', icon: '' },
  overlay: { clsName: 'BlendModeNode', cls: Nodes.BlendModeNode, func: Nodes.overlay, group: 'Filters.Overlay', icon: 'color-filter' },
  pointUV: { clsName: 'PointUVNode', cls: Nodes.PointUVNode, func: () => Nodes.pointUV, group: 'Inputs.UV.Point UV', icon: 'chart-treemap' },
  positionGeometry: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionGeometry, group: 'Inputs.Position.Position Geometry', icon: 'gizmo' },
  positionLocal: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionLocal, group: 'Inputs.Position.Position Local', icon: 'gizmo' },
  positionView: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionView, group: 'Inputs.Position.Position View', icon: 'gizmo' },
  positionViewDirection: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionViewDirection, group: 'Inputs.Position.Position View Direction', icon: 'gizmo' },
  positionWorld: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionWorld, group: 'Inputs.Position.Position World', icon: 'gizmo' },
  positionWorldDirection: { clsName: 'PositionNode', cls: Nodes.PositionNode, func: () => Nodes.positionWorldDirection, group: 'Inputs.Position.Position World Direction', icon: 'gizmo' },
  posterize: { clsName: 'PosterizeNode', cls: Nodes.PosterizeNode, func: Nodes.posterize, group: 'Filters.Posterize', icon: 'color-filter' },
  pow: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.pow, group: 'Math.Arithmetic Operators.Power', icon: 'arrow-up-right' },
  pow2: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.pow2, group: '', icon: '' },
  pow3: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.pow3, group: '', icon: '' },
  pow4: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.pow4, group: '', icon: '' },
  property: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: Nodes.property, group: '', icon: '' },
  radians: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.radians, group: 'Math.Functions.Radians', icon: 'math-function' },
  range: { clsName: 'RangeNode', cls: Nodes.RangeNode, func: Nodes.range, group: 'Procedural.Range', icon: 'sort-ascending-2' },
  rangeFog: { clsName: 'FogRangeNode', cls: Nodes.FogRangeNode, func: Nodes.rangeFog, group: '', icon: '' },
  reciprocal: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.reciprocal, group: 'Math.Functions.Reciprocal', icon: 'math-function' },
  reference: { clsName: 'ReferenceNode', cls: Nodes.ReferenceNode, func: Nodes.reference, group: '', icon: '' },
  reflect: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.reflect, group: 'Math.Functions.Reflect', icon: 'math-function' },
  reflectVector: { clsName: 'ReflectVectorNode', cls: Nodes.ReflectVectorNode, func: () => Nodes.reflectVector, group: '', icon: '' },
  refract: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.refract, group: 'Math.Functions.Refract', icon: 'math-function' },
  remainder: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.remainder, group: 'Math.Arithmetic Operators.Remainder', icon: 'percentage' },
  remap: { clsName: 'RemapNode', cls: Nodes.RemapNode, func: Nodes.remap, group: 'Math.Functions.Remap', icon: 'math-function' },
  remapClamp: { clsName: 'RemapNode', cls: Nodes.RemapNode, func: Nodes.remapClamp, group: '', icon: '' },
  rotateUV: { clsName: 'RotateUVNode', cls: Nodes.RotateUVNode, func: Nodes.rotateUV, group: 'Utils.UV.Rotate UV', icon: 'rotate-clockwise-2' },
  roughness: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => Nodes.roughness, group: '', icon: '' },
  round: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.round, group: 'Math.Functions.Round', icon: 'math-function' },
  sRGBToLinear: { clsName: 'ColorSpaceNode', cls: Nodes.ColorSpaceNode, func: NodesHacked.sRGBToLinear, group: '', icon: '' },
  saturate: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.saturate, group: 'Math.Functions.Saturate', icon: 'math-function' },
  saturation: { clsName: 'ColorAdjustmentNode', cls: Nodes.ColorAdjustmentNode, func: Nodes.saturation, group: 'Filters.Saturation', icon: 'color-filter' },
  screen: { clsName: 'BlendModeNode', cls: Nodes.BlendModeNode, func: Nodes.screen, group: 'Filters.Screen', icon: 'color-filter' },
  scriptable: { clsName: 'undefined', cls: undefined, func: NodesHacked.scriptable, group: '', icon: '' },
  scriptableValue: { clsName: 'undefined', cls: undefined, func: NodesHacked.scriptableValue, group: '', icon: '' },
  shader: { clsName: 'undefined', cls: undefined, func: NodesHacked.shader, group: '', icon: '' },
  shiftLeft: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.shiftLeft, group: 'Math.Bitwise Operators.Shift left', icon: 'binary' },
  shiftRight: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.shiftRight, group: 'Math.Bitwise Operators.Shift right', icon: 'binary' },
  shininess: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => NodesHacked.shininess, group: '', icon: '' },
  sign: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.sign, group: 'Math.Functions.Sign', icon: 'math-function' },
  sin: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.sin, group: 'Math.Functions.Sine', icon: 'math-function' },
  smoothstep: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.smoothstep, group: 'Math.Functions.Smoothstep', icon: 'math-function' },
  specularColor: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => Nodes.specularColor, group: '', icon: '' },
  specularMIPLevel: { clsName: 'SpecularMIPLevelNode', cls: Nodes.SpecularMIPLevelNode, func: Nodes.specularMIPLevel, group: '', icon: '' },
  split: { clsName: 'undefined', cls: undefined, func: NodesHacked.split, group: '', icon: '' },
  spritesheetUV: { clsName: 'SpriteSheetUVNode', cls: Nodes.SpriteSheetUVNode, func: Nodes.spritesheetUV, group: '', icon: '' },
  sqrt: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.sqrt, group: 'Math.Functions.Sqrt', icon: 'math-function' },
  stack: { clsName: 'StackNode', cls: Nodes.StackNode, func: NodesHacked.stack, group: '', icon: '' },
  step: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.step, group: 'Math.Functions.Step', icon: 'math-function' },
  storage: { clsName: 'undefined', cls: undefined, func: Nodes.storage, group: '', icon: '' },
  string: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: NodesHacked.string, group: 'Inputs.Primitives.string', icon: 'forms' },
  sub: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.sub, group: 'Math.Arithmetic Operators.Subtraction', icon: 'minus' },
  tan: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.tan, group: 'Math.Functions.Tangent', icon: 'math-function' },
  tangentGeometry: { clsName: 'TangentNode', cls: Nodes.TangentNode, func: () => Nodes.tangentGeometry, group: 'Inputs.Tangent.Tangent Geometry', icon: 'arrows-up-right' },
  tangentLocal: { clsName: 'TangentNode', cls: Nodes.TangentNode, func: () => Nodes.tangentLocal, group: 'Inputs.Tangent.Tangent Local', icon: 'arrows-up-right' },
  tangentView: { clsName: 'TangentNode', cls: Nodes.TangentNode, func: () => Nodes.tangentView, group: 'Inputs.Tangent.Tangent View', icon: 'arrows-up-right' },
  tangentWorld: { clsName: 'TangentNode', cls: Nodes.TangentNode, func: () => Nodes.tangentWorld, group: 'Inputs.Tangent.Tangent World', icon: 'arrows-up-right' },
  temp: { clsName: 'VarNode', cls: Nodes.VarNode, func: Nodes.temp, group: '', icon: '' },
  textureNode: { clsName: 'TextureNode', cls: Nodes.TextureNode, func: Nodes.texture, group: 'Inputs.Primitives.Texture Node', icon: 'photo' },
  textureBicubic: { clsName: 'undefined', cls: undefined, func: NodesHacked.textureBicubic, group: '', icon: '' },
  textureStore: { clsName: 'undefined', cls: undefined, func: NodesHacked.textureStore, group: '', icon: '' },
  timerDelta: { clsName: 'TimerNode', cls: Nodes.TimerNode, func: Nodes.timerDelta, group: '', icon: '' },
  timerGlobal: { clsName: 'TimerNode', cls: Nodes.TimerNode, func: Nodes.timerGlobal, group: '', icon: '' },
  timerLocal: { clsName: 'TimerNode', cls: Nodes.TimerNode, func: Nodes.timerLocal, group: '', icon: '' },
  toneMapping: { clsName: 'ToneMappingNode', cls: Nodes.ToneMappingNode, func: Nodes.toneMapping, group: '', icon: '' },
  transformDirection: { clsName: 'MathNode', cls: Nodes.MathNode, func: Nodes.transformDirection, group: 'Math.Functions.Transform Direction', icon: 'math-function' },
  transformedBitangentView: { clsName: 'MathNode', cls: Nodes.MathNode, func: () => Nodes.transformedBitangentView, group: 'Inputs.Bitangent.Transformed Bitangent View', icon: 'arrows-up-left' },
  transformedBitangentWorld: { clsName: 'MathNode', cls: Nodes.MathNode, func: () => Nodes.transformedBitangentWorld, group: 'Inputs.Bitangent.Transformed Bitangent World', icon: 'arrows-up-left' },
  transformedClearcoatNormalView: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => NodesHacked.transformedClearcoatNormalView, group: '', icon: '' },
  transformedNormalView: { clsName: 'PropertyNode', cls: Nodes.PropertyNode, func: () => Nodes.transformedNormalView, group: 'Inputs.Normal.Transformed Normal View', icon: 'arrow-bar-up' },
  transformedNormalWorld: { clsName: 'MathNode', cls: Nodes.MathNode, func: () => NodesHacked.transformedNormalWorld, group: 'Inputs.Normal.Transformed Normal World', icon: 'arrow-bar-up' },
  transformedTangentView: { clsName: 'VarNode', cls: Nodes.VarNode, func: () => Nodes.transformedTangentView, group: 'Inputs.Tangent.Transformed Tangent View', icon: 'arrows-up-right' },
  transformedTangentWorld: { clsName: 'MathNode', cls: Nodes.MathNode, func: () => Nodes.transformedTangentWorld, group: 'Inputs.Tangent.Transformed Tangent World', icon: 'arrows-up-right' },
  triplanarTexture: { clsName: 'TriplanarTexturesNode', cls: Nodes.TriplanarTexturesNode, func: Nodes.triplanarTexture, group: '', icon: '' },
  triplanarTextures: { clsName: 'TriplanarTexturesNode', cls: Nodes.TriplanarTexturesNode, func: Nodes.triplanarTextures, group: '', icon: '' },
  trunc: { clsName: 'MathNode', cls: Nodes.MathNode, func: NodesHacked.trunc, group: '', icon: '' },
  tslFn: { clsName: 'undefined', cls: undefined, func: NodesHacked.tslFn, group: '', icon: '' },
  uint: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.uint, group: '', icon: '' },
  umat3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.umat3, group: 'Inputs.Primitives.umat3', icon: 'box-multiple-3' },
  umat4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.umat4, group: 'Inputs.Primitives.umat4', icon: 'box-multiple-4' },
  uniform: { clsName: 'UniformNode', cls: Nodes.UniformNode, func: Nodes.uniform, group: '', icon: '' },
  userData: { clsName: 'UserDataNode', cls: Nodes.UserDataNode, func: Nodes.userData, group: '', icon: '' },
  uv: { clsName: 'UVNode', cls: Nodes.UVNode, func: Nodes.uv, group: '', icon: '' },
  uvec2: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.uvec2, group: 'Inputs.Primitives.uvec2', icon: 'box-multiple-2' },
  uvec3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.uvec3, group: 'Inputs.Primitives.uvec3', icon: 'box-multiple-3' },
  uvec4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.uvec4, group: 'Inputs.Primitives.uvec4', icon: 'box-multiple-4' },
  varying: { clsName: 'VaryingNode', cls: Nodes.VaryingNode, func: NodesHacked.varying, group: '', icon: '' },
  vec2: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.vec2, group: 'Inputs.Primitives.vec2', icon: 'box-multiple-2' },
  vec3: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.vec3, group: 'Inputs.Primitives.vec3', icon: 'box-multiple-3' },
  vec4: { clsName: 'ConstNode', cls: Nodes.ConstNode, func: Nodes.vec4, group: 'Inputs.Primitives.vec4', icon: 'box-multiple-4' },
  vertexIndex: { clsName: 'undefined', cls: undefined, func: () => NodesHacked.vertexIndex, group: '', icon: '' },
  vibrance: { clsName: 'ColorAdjustmentNode', cls: Nodes.ColorAdjustmentNode, func: Nodes.vibrance, group: 'Filters.Vibrance', icon: 'color-filter' },
  viewportBottomLeft: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportBottomLeft, group: 'Inputs.Viewport.Viewport Bottom Left', icon: 'device-desktop' },
  viewportBottomRight: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportBottomRight, group: 'Inputs.Viewport.Viewport Bottom Right', icon: 'device-desktop' },
  viewportCoordinate: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportCoordinate, group: 'Inputs.Viewport.Viewport Coordinate', icon: 'device-desktop' },
  viewportDepthTexture: { clsName: 'undefined', cls: undefined, func: NodesHacked.viewportDepthTexture, group: '', icon: '' },
  viewportMipTexture: { clsName: 'undefined', cls: undefined, func: NodesHacked.viewportMipTexture, group: '', icon: '' },
  viewportResolution: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportResolution, group: 'Inputs.Viewport.Viewport Resolution', icon: 'device-desktop' },
  viewportSharedTexture: { clsName: 'undefined', cls: undefined, func: NodesHacked.viewportSharedTexture, group: '', icon: '' },
  viewportTexture: { clsName: 'undefined', cls: undefined, func: NodesHacked.viewportTexture, group: '', icon: '' },
  viewportTopLeft: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportTopLeft, group: 'Inputs.Viewport.Viewport Top Left', icon: 'device-desktop' },
  viewportTopRight: { clsName: 'ViewportNode', cls: Nodes.ViewportNode, func: () => Nodes.viewportTopRight, group: 'Inputs.Viewport.Viewport Top Right', icon: 'device-desktop' },
  wgsl: { clsName: 'CodeNode', cls: Nodes.CodeNode, func: NodesHacked.wgsl, group: '', icon: '' },
  wgslFn: { clsName: 'undefined', cls: undefined, func: NodesHacked.wgslFn, group: '', icon: '' },
  xor: { clsName: 'OperatorNode', cls: Nodes.OperatorNode, func: Nodes.xor, group: 'Math.Bitwise Operators.XOR', icon: 'binary' },
};
